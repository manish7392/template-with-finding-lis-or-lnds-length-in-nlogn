//manish kumar patel
#include<bits/stdc++.h>
using namespace std;



#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repb(i,a,b) for(ll i=a;i>=b;i--)
#define err() cout<<"--------------------------"<<endl; 
#define errA(A) for(auto i:A)   cout<<i<<" ";cout<<endl;
#define err1(a) cout<<#a<<" "<<a<<endl



#define err2(a,b) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<endl
#define err3(a,b,c) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<" "<<#c<<" "<<c<<endl
#define err4(a,b,c,d) cout<<#a<<" "<<a<<" "<<#b<<" "<<b<<" "<<#c<<" "<<c<<" "<<#d<<" "<<d<<endl
#define pb push_back
#define all(A)  A.begin(),A.end()
#define allr(A)    A.rbegin(),A.rend()
#define ft first
#define sd second

#define pii pair<int,int>
#define pll pair<ll,ll>
#define V vector<ll>
#define S set<ll>
#define VV vector<V>
#define Vpll vector<pll>
 
#define endl "\n"
#define LOG 20
VV dp;
V depth;

void pre_comp(list<int> * adj,int n,int root,int par)
{
    // err2(root,par);
    depth[root]=depth[par]+1;
    dp[root][0]=par;
    rep(i,1,LOG)
    {
        dp[root][i]=dp[dp[root][i-1]][i-1];

    }
    for(auto it=adj[root].begin();it!=adj[root].end();it++)
    {
        if(*it !=par)
        pre_comp(adj,n,*it,root);
    }

}

int lca(list<int> *adj,int x,int y,int n)
{
    if(depth[x]<depth[y])
    {
        swap(x,y);
    }
    int kk=depth[x]-depth[y];
   
    rep(k,0,LOG)
    {
        if(kk&(1<<k))
        {
            x=dp[x][k];
        }
    }
    // err1(x);
    if(x==y)
    {
        return x;
    }
    repb(i,LOG-1,0)
    {
        if(dp[x][i]!=dp[y][i])
        {
            x=dp[x][i];
            y=dp[y][i];
        }
    }
    return dp[x][0];
}

int main()
    {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL); cout.tie(NULL);
        #ifndef ONLINE_JUDGE
         clock_t tStart = clock();
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
        #endif
        int t;
        cin>>t;
        // t=1;
           
        while(t--)
        {
        
            int n,q,root;
            cin>>n>>q>>root;
            dp.resize(n+1,V(LOG,0));
            depth.resize(n+1,0);

            list<int> * adj=new list<int>[n+1];
            rep(i,0,n-1)
            {
                int x,y;
                cin>>x>>y;
                adj[x].pb(y);
                adj[y].pb(x);
                // err2(x,y);
            }
            pre_comp(adj,n,root,0);
            // rep(i,0,n+1)
            // {
            //     errA(dp[i]);
            // }
            //queries
            rep(i,0,q)
            {
                int x,y;
                cin>>x>>y;
                cout<<lca(adj,x,y,n)<<"\n";
            }
            // rep(i,0,n+1)
            // {
            //     cout<<i;
            //     for(auto it=adj[i].begin();it!=adj[i].end();it++)
            //     {
            //         cout<<"->"<<*it;
            //     }cout<<"\n";
            // }


        }
        #ifndef ONLINE_JUDGE
            printf("\nRun Time -> %.10fs\n", (double)(clock()-tStart) / CLOCKS_PER_SEC);
            #endif
}   
